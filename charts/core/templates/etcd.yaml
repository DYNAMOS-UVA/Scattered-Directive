# Create a PV for each etcd replica, in this case 3, following the volumeMounts below of the StatefulSet (in this case /etcd-data)
# Define Persistent Volume (PV) explicitely on the node, otherwise, the PVC cannot find it. This did work without PV on the local setup, but for the FABRIC this was required.
# https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/
# PV for etcd-0
apiVersion: v1
kind: PersistentVolume
metadata:
  name: etcd-data-etcd-0-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/etcd-0-data"
  persistentVolumeReclaimPolicy: Retain
  claimRef:
    name: etcd-data-etcd-0
    namespace: core
  # Use the dynamos-core node for this
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ .Values.node }}
---
# PV for etcd-1
apiVersion: v1
kind: PersistentVolume
metadata:
  name: etcd-data-etcd-1-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/etcd-1-data"
  persistentVolumeReclaimPolicy: Retain
  claimRef:
    name: etcd-data-etcd-1
    namespace: core
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ .Values.node }}
---
# PV for etcd-2
apiVersion: v1
kind: PersistentVolume
metadata:
  name: etcd-data-etcd-2-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/etcd-2-data"
  persistentVolumeReclaimPolicy: Retain
  claimRef:
    name: etcd-data-etcd-2
    namespace: core
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ .Values.node }}
---
# https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: etcd
  namespace: {{ .Values.Namespace }}
spec:
  serviceName: "etcd-headless"
  replicas: 3
  selector:
    matchLabels:
      app: etcd
  template:
    metadata:
      labels:
        app: etcd
    spec:
      # Use the DYNAMOS core node for this, see https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
      nodeSelector:
        kubernetes.io/hostname: {{ .Values.node }}
      containers:
      - name: etcd
        image: quay.io/coreos/etcd:v3.5.1
        env:
        # - name: OC_AGENT_HOST
        #   value: {{ .Values.tracingEndpoint }}
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - containerPort: 2379
          name: client
        - containerPort: 2380
          name: peer
        command:
          - /usr/local/bin/etcd
          - --data-dir=/etcd-data
          - --name=$(POD_NAME)
          - --initial-advertise-peer-urls=http://$(POD_NAME).etcd-headless.{{ .Values.Namespace }}.svc.cluster.local:2380
          - --listen-peer-urls=http://0.0.0.0:2380
          - --listen-client-urls=http://0.0.0.0:2379
          - --advertise-client-urls=http://$(POD_NAME).etcd-headless.{{ .Values.Namespace }}.svc.cluster.local:2379
          - --initial-cluster-token=my-etcd-token
          - --initial-cluster=etcd-0=http://etcd-0.etcd-headless.{{ .Values.Namespace }}.svc.cluster.local:2380,etcd-1=http://etcd-1.etcd-headless.{{ .Values.Namespace }}.svc.cluster.local:2380,etcd-2=http://etcd-2.etcd-headless.{{ .Values.Namespace }}.svc.cluster.local:2380
          - --initial-cluster-state=new
        volumeMounts:
        - name: etcd-data
          mountPath: /etcd-data
  volumeClaimTemplates:
  - metadata:
      name: etcd-data
      namespace: {{ .Values.Namespace }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
