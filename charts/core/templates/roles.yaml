apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-service-account

---
# apiGroups:
# "" (core): pods, services, endpoints, nodes, namespaces
# "apps": deployments, replicasets, statefulsets, daemonsets
# "batch": jobs, cronjobs
# "extensions": ingresses
# "networking.k8s.io": networkpolicies
# "storage.k8s.io": storageclasses, volumeattachments
# "rbac.authorization.k8s.io": roles, rolebindings, clusterroles, clusterrolebindings
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-cluster-role
rules:
- apiGroups: ["","apps"]
  resources: ["pods", "services", "deployments"]
  verbs: ["create", "get", "list", "watch", "update", "delete"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Name }}-cluster-role
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-service-account
  namespace: {{ .Release.Namespace }}

# ---
# apiVersion: policy.linkerd.io/v1beta1
# kind: Server
# metadata:
#   namespace: linkerd-viz
#   name: prometheus
# spec:
#   podSelector:
#     matchLabels:
#       app: prometheus
#   port: 9090
#   proxyProtocol: HTTP/2


# ---
# apiVersion: policy.linkerd.io/v1beta1
# kind: ServerAuthorization
# metadata:
#   namespace: linkerd-viz
#   name: prometheus
# spec:
#   server:
#     name: prometheus
#   client:
#     meshTLS:
#       serviceAccounts:
#         - name: default
#           namespace: core

# ---
# apiVersion: policy.linkerd.io/v1alpha1
# kind: AuthorizationPolicy
# metadata:
#   namespace: linkerd-viz
#   name: prometheus-admin
# spec:
#   targetRef:
#     group: policy.linkerd.io
#     kind: Server
#     name: prometheus-admin
#   requiredAuthenticationRefs:
#     - kind: ServiceAccount
#       name: default
#       namespace: core
